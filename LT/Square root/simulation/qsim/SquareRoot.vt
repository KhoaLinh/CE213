// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2022 10:08:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Controller_vlg_sample_tst(
	Clk,
	Reset,
	Start,
	sampler_tx
);
input  Clk;
input  Reset;
input  Start;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or Reset or Start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Controller_vlg_check_tst (
	OE,
	Op1,
	Op2,
	Q,
	R1,
	R2,
	R3,
	R4,
	R5,
	sampler_rx
);
input [11:0] OE;
input [1:0] Op1;
input [1:0] Op2;
input [3:0] Q;
input  R1;
input  R2;
input  R3;
input  R4;
input  R5;
input sampler_rx;

reg [11:0] OE_expected;
reg [1:0] Op1_expected;
reg [1:0] Op2_expected;
reg [3:0] Q_expected;
reg  R1_expected;
reg  R2_expected;
reg  R3_expected;
reg  R4_expected;
reg  R5_expected;

reg [11:0] OE_prev;
reg [1:0] Op1_prev;
reg [1:0] Op2_prev;
reg [3:0] Q_prev;
reg  R1_prev;
reg  R2_prev;
reg  R3_prev;
reg  R4_prev;
reg  R5_prev;

reg [11:0] OE_expected_prev;
reg [1:0] Op1_expected_prev;
reg [1:0] Op2_expected_prev;
reg [3:0] Q_expected_prev;
reg  R1_expected_prev;
reg  R2_expected_prev;
reg  R3_expected_prev;
reg  R4_expected_prev;
reg  R5_expected_prev;

reg [11:0] last_OE_exp;
reg [1:0] last_Op1_exp;
reg [1:0] last_Op2_exp;
reg [3:0] last_Q_exp;
reg  last_R1_exp;
reg  last_R2_exp;
reg  last_R3_exp;
reg  last_R4_exp;
reg  last_R5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	OE_prev = OE;
	Op1_prev = Op1;
	Op2_prev = Op2;
	Q_prev = Q;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
	R4_prev = R4;
	R5_prev = R5;
end

// update expected /o prevs

always @(trigger)
begin
	OE_expected_prev = OE_expected;
	Op1_expected_prev = Op1_expected;
	Op2_expected_prev = Op2_expected;
	Q_expected_prev = Q_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
	R4_expected_prev = R4_expected;
	R5_expected_prev = R5_expected;
end


// expected OE[ 11 ]
initial
begin
	OE_expected[11] = 1'bX;
end 
// expected OE[ 10 ]
initial
begin
	OE_expected[10] = 1'bX;
end 
// expected OE[ 9 ]
initial
begin
	OE_expected[9] = 1'bX;
end 
// expected OE[ 8 ]
initial
begin
	OE_expected[8] = 1'bX;
end 
// expected OE[ 7 ]
initial
begin
	OE_expected[7] = 1'bX;
end 
// expected OE[ 6 ]
initial
begin
	OE_expected[6] = 1'bX;
end 
// expected OE[ 5 ]
initial
begin
	OE_expected[5] = 1'bX;
end 
// expected OE[ 4 ]
initial
begin
	OE_expected[4] = 1'bX;
end 
// expected OE[ 3 ]
initial
begin
	OE_expected[3] = 1'bX;
end 
// expected OE[ 2 ]
initial
begin
	OE_expected[2] = 1'bX;
end 
// expected OE[ 1 ]
initial
begin
	OE_expected[1] = 1'bX;
end 
// expected OE[ 0 ]
initial
begin
	OE_expected[0] = 1'bX;
end 
// expected Op1[ 1 ]
initial
begin
	Op1_expected[1] = 1'bX;
end 
// expected Op1[ 0 ]
initial
begin
	Op1_expected[0] = 1'bX;
end 
// expected Op2[ 1 ]
initial
begin
	Op2_expected[1] = 1'bX;
end 
// expected Op2[ 0 ]
initial
begin
	Op2_expected[0] = 1'bX;
end 
// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 

// expected R1
initial
begin
	R1_expected = 1'bX;
end 

// expected R2
initial
begin
	R2_expected = 1'bX;
end 

// expected R3
initial
begin
	R3_expected = 1'bX;
end 

// expected R4
initial
begin
	R4_expected = 1'bX;
end 

// expected R5
initial
begin
	R5_expected = 1'bX;
end 
// generate trigger
always @(OE_expected or OE or Op1_expected or Op1 or Op2_expected or Op2 or Q_expected or Q or R1_expected or R1 or R2_expected or R2 or R3_expected or R3 or R4_expected or R4 or R5_expected or R5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OE = %b | expected Op1 = %b | expected Op2 = %b | expected Q = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | expected R4 = %b | expected R5 = %b | ",OE_expected_prev,Op1_expected_prev,Op2_expected_prev,Q_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev,R4_expected_prev,R5_expected_prev);
	$display("| real OE = %b | real Op1 = %b | real Op2 = %b | real Q = %b | real R1 = %b | real R2 = %b | real R3 = %b | real R4 = %b | real R5 = %b | ",OE_prev,Op1_prev,Op2_prev,Q_prev,R1_prev,R2_prev,R3_prev,R4_prev,R5_prev);
`endif
	if (
		( OE_expected_prev[0] !== 1'bx ) && ( OE_prev[0] !== OE_expected_prev[0] )
		&& ((OE_expected_prev[0] !== last_OE_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[0] = OE_expected_prev[0];
	end
	if (
		( OE_expected_prev[1] !== 1'bx ) && ( OE_prev[1] !== OE_expected_prev[1] )
		&& ((OE_expected_prev[1] !== last_OE_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[1] = OE_expected_prev[1];
	end
	if (
		( OE_expected_prev[2] !== 1'bx ) && ( OE_prev[2] !== OE_expected_prev[2] )
		&& ((OE_expected_prev[2] !== last_OE_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[2] = OE_expected_prev[2];
	end
	if (
		( OE_expected_prev[3] !== 1'bx ) && ( OE_prev[3] !== OE_expected_prev[3] )
		&& ((OE_expected_prev[3] !== last_OE_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[3] = OE_expected_prev[3];
	end
	if (
		( OE_expected_prev[4] !== 1'bx ) && ( OE_prev[4] !== OE_expected_prev[4] )
		&& ((OE_expected_prev[4] !== last_OE_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[4] = OE_expected_prev[4];
	end
	if (
		( OE_expected_prev[5] !== 1'bx ) && ( OE_prev[5] !== OE_expected_prev[5] )
		&& ((OE_expected_prev[5] !== last_OE_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[5] = OE_expected_prev[5];
	end
	if (
		( OE_expected_prev[6] !== 1'bx ) && ( OE_prev[6] !== OE_expected_prev[6] )
		&& ((OE_expected_prev[6] !== last_OE_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[6] = OE_expected_prev[6];
	end
	if (
		( OE_expected_prev[7] !== 1'bx ) && ( OE_prev[7] !== OE_expected_prev[7] )
		&& ((OE_expected_prev[7] !== last_OE_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[7] = OE_expected_prev[7];
	end
	if (
		( OE_expected_prev[8] !== 1'bx ) && ( OE_prev[8] !== OE_expected_prev[8] )
		&& ((OE_expected_prev[8] !== last_OE_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[8] = OE_expected_prev[8];
	end
	if (
		( OE_expected_prev[9] !== 1'bx ) && ( OE_prev[9] !== OE_expected_prev[9] )
		&& ((OE_expected_prev[9] !== last_OE_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[9] = OE_expected_prev[9];
	end
	if (
		( OE_expected_prev[10] !== 1'bx ) && ( OE_prev[10] !== OE_expected_prev[10] )
		&& ((OE_expected_prev[10] !== last_OE_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[10] = OE_expected_prev[10];
	end
	if (
		( OE_expected_prev[11] !== 1'bx ) && ( OE_prev[11] !== OE_expected_prev[11] )
		&& ((OE_expected_prev[11] !== last_OE_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OE_exp[11] = OE_expected_prev[11];
	end
	if (
		( Op1_expected_prev[0] !== 1'bx ) && ( Op1_prev[0] !== Op1_expected_prev[0] )
		&& ((Op1_expected_prev[0] !== last_Op1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op1_expected_prev);
		$display ("     Real value = %b", Op1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Op1_exp[0] = Op1_expected_prev[0];
	end
	if (
		( Op1_expected_prev[1] !== 1'bx ) && ( Op1_prev[1] !== Op1_expected_prev[1] )
		&& ((Op1_expected_prev[1] !== last_Op1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op1_expected_prev);
		$display ("     Real value = %b", Op1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Op1_exp[1] = Op1_expected_prev[1];
	end
	if (
		( Op2_expected_prev[0] !== 1'bx ) && ( Op2_prev[0] !== Op2_expected_prev[0] )
		&& ((Op2_expected_prev[0] !== last_Op2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op2_expected_prev);
		$display ("     Real value = %b", Op2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Op2_exp[0] = Op2_expected_prev[0];
	end
	if (
		( Op2_expected_prev[1] !== 1'bx ) && ( Op2_prev[1] !== Op2_expected_prev[1] )
		&& ((Op2_expected_prev[1] !== last_Op2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Op2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Op2_expected_prev);
		$display ("     Real value = %b", Op2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Op2_exp[1] = Op2_expected_prev[1];
	end
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( R1_expected_prev !== 1'bx ) && ( R1_prev !== R1_expected_prev )
		&& ((R1_expected_prev !== last_R1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp = R1_expected_prev;
	end
	if (
		( R2_expected_prev !== 1'bx ) && ( R2_prev !== R2_expected_prev )
		&& ((R2_expected_prev !== last_R2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp = R2_expected_prev;
	end
	if (
		( R3_expected_prev !== 1'bx ) && ( R3_prev !== R3_expected_prev )
		&& ((R3_expected_prev !== last_R3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R3_exp = R3_expected_prev;
	end
	if (
		( R4_expected_prev !== 1'bx ) && ( R4_prev !== R4_expected_prev )
		&& ((R4_expected_prev !== last_R4_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R4_exp = R4_expected_prev;
	end
	if (
		( R5_expected_prev !== 1'bx ) && ( R5_prev !== R5_expected_prev )
		&& ((R5_expected_prev !== last_R5_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R5_exp = R5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Reset;
reg Start;
// wires                                               
wire [11:0] OE;
wire [1:0] Op1;
wire [1:0] Op2;
wire [3:0] Q;
wire R1;
wire R2;
wire R3;
wire R4;
wire R5;

wire sampler;                             

// assign statements (if any)                          
Controller i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.OE(OE),
	.Op1(Op1),
	.Op2(Op2),
	.Q(Q),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.Reset(Reset),
	.Start(Start)
);

// Clk
always
begin
	Clk = 1'b0;
	Clk = #10000 1'b1;
	#10000;
end 

// Start
initial
begin
	Start = 1'b0;
	Start = #10000 1'b1;
	Start = #20000 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 

Controller_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.Reset(Reset),
	.Start(Start),
	.sampler_tx(sampler)
);

Controller_vlg_check_tst tb_out(
	.OE(OE),
	.Op1(Op1),
	.Op2(Op2),
	.Q(Q),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.sampler_rx(sampler)
);
endmodule

