// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2022 17:10:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Datapath_vlg_sample_tst(
	A,
	B,
	Clk,
	Load,
	OE,
	Op1,
	Op2,
	sampler_tx
);
input [15:0] A;
input [15:0] B;
input  Clk;
input [4:0] Load;
input [11:0] OE;
input [1:0] Op1;
input [1:0] Op2;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clk or Load or OE or Op1 or Op2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Datapath_vlg_check_tst (
	AU1,
	AU2,
	O,
	R1,
	R2,
	R3,
	R4,
	R5,
	S1,
	S2,
	sampler_rx
);
input [15:0] AU1;
input [15:0] AU2;
input [15:0] O;
input [15:0] R1;
input [15:0] R2;
input [15:0] R3;
input [15:0] R4;
input [15:0] R5;
input [15:0] S1;
input [15:0] S2;
input sampler_rx;

reg [15:0] AU1_expected;
reg [15:0] AU2_expected;
reg [15:0] O_expected;
reg [15:0] R1_expected;
reg [15:0] R2_expected;
reg [15:0] R3_expected;
reg [15:0] R4_expected;
reg [15:0] R5_expected;
reg [15:0] S1_expected;
reg [15:0] S2_expected;

reg [15:0] AU1_prev;
reg [15:0] AU2_prev;
reg [15:0] O_prev;
reg [15:0] R1_prev;
reg [15:0] R2_prev;
reg [15:0] R3_prev;
reg [15:0] R4_prev;
reg [15:0] R5_prev;
reg [15:0] S1_prev;
reg [15:0] S2_prev;

reg [15:0] AU1_expected_prev;
reg [15:0] AU2_expected_prev;
reg [15:0] O_expected_prev;
reg [15:0] R1_expected_prev;
reg [15:0] R2_expected_prev;
reg [15:0] R3_expected_prev;
reg [15:0] R4_expected_prev;
reg [15:0] R5_expected_prev;
reg [15:0] S1_expected_prev;
reg [15:0] S2_expected_prev;

reg [15:0] last_AU1_exp;
reg [15:0] last_AU2_exp;
reg [15:0] last_O_exp;
reg [15:0] last_R1_exp;
reg [15:0] last_R2_exp;
reg [15:0] last_R3_exp;
reg [15:0] last_R4_exp;
reg [15:0] last_R5_exp;
reg [15:0] last_S1_exp;
reg [15:0] last_S2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	AU1_prev = AU1;
	AU2_prev = AU2;
	O_prev = O;
	R1_prev = R1;
	R2_prev = R2;
	R3_prev = R3;
	R4_prev = R4;
	R5_prev = R5;
	S1_prev = S1;
	S2_prev = S2;
end

// update expected /o prevs

always @(trigger)
begin
	AU1_expected_prev = AU1_expected;
	AU2_expected_prev = AU2_expected;
	O_expected_prev = O_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	R3_expected_prev = R3_expected;
	R4_expected_prev = R4_expected;
	R5_expected_prev = R5_expected;
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
end


// expected AU1[ 15 ]
initial
begin
	AU1_expected[15] = 1'bX;
end 
// expected AU1[ 14 ]
initial
begin
	AU1_expected[14] = 1'bX;
end 
// expected AU1[ 13 ]
initial
begin
	AU1_expected[13] = 1'bX;
end 
// expected AU1[ 12 ]
initial
begin
	AU1_expected[12] = 1'bX;
end 
// expected AU1[ 11 ]
initial
begin
	AU1_expected[11] = 1'bX;
end 
// expected AU1[ 10 ]
initial
begin
	AU1_expected[10] = 1'bX;
end 
// expected AU1[ 9 ]
initial
begin
	AU1_expected[9] = 1'bX;
end 
// expected AU1[ 8 ]
initial
begin
	AU1_expected[8] = 1'bX;
end 
// expected AU1[ 7 ]
initial
begin
	AU1_expected[7] = 1'bX;
end 
// expected AU1[ 6 ]
initial
begin
	AU1_expected[6] = 1'bX;
end 
// expected AU1[ 5 ]
initial
begin
	AU1_expected[5] = 1'bX;
end 
// expected AU1[ 4 ]
initial
begin
	AU1_expected[4] = 1'bX;
end 
// expected AU1[ 3 ]
initial
begin
	AU1_expected[3] = 1'bX;
end 
// expected AU1[ 2 ]
initial
begin
	AU1_expected[2] = 1'bX;
end 
// expected AU1[ 1 ]
initial
begin
	AU1_expected[1] = 1'bX;
end 
// expected AU1[ 0 ]
initial
begin
	AU1_expected[0] = 1'bX;
end 
// expected AU2[ 15 ]
initial
begin
	AU2_expected[15] = 1'bX;
end 
// expected AU2[ 14 ]
initial
begin
	AU2_expected[14] = 1'bX;
end 
// expected AU2[ 13 ]
initial
begin
	AU2_expected[13] = 1'bX;
end 
// expected AU2[ 12 ]
initial
begin
	AU2_expected[12] = 1'bX;
end 
// expected AU2[ 11 ]
initial
begin
	AU2_expected[11] = 1'bX;
end 
// expected AU2[ 10 ]
initial
begin
	AU2_expected[10] = 1'bX;
end 
// expected AU2[ 9 ]
initial
begin
	AU2_expected[9] = 1'bX;
end 
// expected AU2[ 8 ]
initial
begin
	AU2_expected[8] = 1'bX;
end 
// expected AU2[ 7 ]
initial
begin
	AU2_expected[7] = 1'bX;
end 
// expected AU2[ 6 ]
initial
begin
	AU2_expected[6] = 1'bX;
end 
// expected AU2[ 5 ]
initial
begin
	AU2_expected[5] = 1'bX;
end 
// expected AU2[ 4 ]
initial
begin
	AU2_expected[4] = 1'bX;
end 
// expected AU2[ 3 ]
initial
begin
	AU2_expected[3] = 1'bX;
end 
// expected AU2[ 2 ]
initial
begin
	AU2_expected[2] = 1'bX;
end 
// expected AU2[ 1 ]
initial
begin
	AU2_expected[1] = 1'bX;
end 
// expected AU2[ 0 ]
initial
begin
	AU2_expected[0] = 1'bX;
end 
// expected R1[ 15 ]
initial
begin
	R1_expected[15] = 1'bX;
end 
// expected R1[ 14 ]
initial
begin
	R1_expected[14] = 1'bX;
end 
// expected R1[ 13 ]
initial
begin
	R1_expected[13] = 1'bX;
end 
// expected R1[ 12 ]
initial
begin
	R1_expected[12] = 1'bX;
end 
// expected R1[ 11 ]
initial
begin
	R1_expected[11] = 1'bX;
end 
// expected R1[ 10 ]
initial
begin
	R1_expected[10] = 1'bX;
end 
// expected R1[ 9 ]
initial
begin
	R1_expected[9] = 1'bX;
end 
// expected R1[ 8 ]
initial
begin
	R1_expected[8] = 1'bX;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected R2[ 15 ]
initial
begin
	R2_expected[15] = 1'bX;
end 
// expected R2[ 14 ]
initial
begin
	R2_expected[14] = 1'bX;
end 
// expected R2[ 13 ]
initial
begin
	R2_expected[13] = 1'bX;
end 
// expected R2[ 12 ]
initial
begin
	R2_expected[12] = 1'bX;
end 
// expected R2[ 11 ]
initial
begin
	R2_expected[11] = 1'bX;
end 
// expected R2[ 10 ]
initial
begin
	R2_expected[10] = 1'bX;
end 
// expected R2[ 9 ]
initial
begin
	R2_expected[9] = 1'bX;
end 
// expected R2[ 8 ]
initial
begin
	R2_expected[8] = 1'bX;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 
// expected R3[ 15 ]
initial
begin
	R3_expected[15] = 1'bX;
end 
// expected R3[ 14 ]
initial
begin
	R3_expected[14] = 1'bX;
end 
// expected R3[ 13 ]
initial
begin
	R3_expected[13] = 1'bX;
end 
// expected R3[ 12 ]
initial
begin
	R3_expected[12] = 1'bX;
end 
// expected R3[ 11 ]
initial
begin
	R3_expected[11] = 1'bX;
end 
// expected R3[ 10 ]
initial
begin
	R3_expected[10] = 1'bX;
end 
// expected R3[ 9 ]
initial
begin
	R3_expected[9] = 1'bX;
end 
// expected R3[ 8 ]
initial
begin
	R3_expected[8] = 1'bX;
end 
// expected R3[ 7 ]
initial
begin
	R3_expected[7] = 1'bX;
end 
// expected R3[ 6 ]
initial
begin
	R3_expected[6] = 1'bX;
end 
// expected R3[ 5 ]
initial
begin
	R3_expected[5] = 1'bX;
end 
// expected R3[ 4 ]
initial
begin
	R3_expected[4] = 1'bX;
end 
// expected R3[ 3 ]
initial
begin
	R3_expected[3] = 1'bX;
end 
// expected R3[ 2 ]
initial
begin
	R3_expected[2] = 1'bX;
end 
// expected R3[ 1 ]
initial
begin
	R3_expected[1] = 1'bX;
end 
// expected R3[ 0 ]
initial
begin
	R3_expected[0] = 1'bX;
end 
// expected R4[ 15 ]
initial
begin
	R4_expected[15] = 1'bX;
end 
// expected R4[ 14 ]
initial
begin
	R4_expected[14] = 1'bX;
end 
// expected R4[ 13 ]
initial
begin
	R4_expected[13] = 1'bX;
end 
// expected R4[ 12 ]
initial
begin
	R4_expected[12] = 1'bX;
end 
// expected R4[ 11 ]
initial
begin
	R4_expected[11] = 1'bX;
end 
// expected R4[ 10 ]
initial
begin
	R4_expected[10] = 1'bX;
end 
// expected R4[ 9 ]
initial
begin
	R4_expected[9] = 1'bX;
end 
// expected R4[ 8 ]
initial
begin
	R4_expected[8] = 1'bX;
end 
// expected R4[ 7 ]
initial
begin
	R4_expected[7] = 1'bX;
end 
// expected R4[ 6 ]
initial
begin
	R4_expected[6] = 1'bX;
end 
// expected R4[ 5 ]
initial
begin
	R4_expected[5] = 1'bX;
end 
// expected R4[ 4 ]
initial
begin
	R4_expected[4] = 1'bX;
end 
// expected R4[ 3 ]
initial
begin
	R4_expected[3] = 1'bX;
end 
// expected R4[ 2 ]
initial
begin
	R4_expected[2] = 1'bX;
end 
// expected R4[ 1 ]
initial
begin
	R4_expected[1] = 1'bX;
end 
// expected R4[ 0 ]
initial
begin
	R4_expected[0] = 1'bX;
end 
// expected R5[ 15 ]
initial
begin
	R5_expected[15] = 1'bX;
end 
// expected R5[ 14 ]
initial
begin
	R5_expected[14] = 1'bX;
end 
// expected R5[ 13 ]
initial
begin
	R5_expected[13] = 1'bX;
end 
// expected R5[ 12 ]
initial
begin
	R5_expected[12] = 1'bX;
end 
// expected R5[ 11 ]
initial
begin
	R5_expected[11] = 1'bX;
end 
// expected R5[ 10 ]
initial
begin
	R5_expected[10] = 1'bX;
end 
// expected R5[ 9 ]
initial
begin
	R5_expected[9] = 1'bX;
end 
// expected R5[ 8 ]
initial
begin
	R5_expected[8] = 1'bX;
end 
// expected R5[ 7 ]
initial
begin
	R5_expected[7] = 1'bX;
end 
// expected R5[ 6 ]
initial
begin
	R5_expected[6] = 1'bX;
end 
// expected R5[ 5 ]
initial
begin
	R5_expected[5] = 1'bX;
end 
// expected R5[ 4 ]
initial
begin
	R5_expected[4] = 1'bX;
end 
// expected R5[ 3 ]
initial
begin
	R5_expected[3] = 1'bX;
end 
// expected R5[ 2 ]
initial
begin
	R5_expected[2] = 1'bX;
end 
// expected R5[ 1 ]
initial
begin
	R5_expected[1] = 1'bX;
end 
// expected R5[ 0 ]
initial
begin
	R5_expected[0] = 1'bX;
end 
// expected S1[ 15 ]
initial
begin
	S1_expected[15] = 1'bX;
end 
// expected S1[ 14 ]
initial
begin
	S1_expected[14] = 1'bX;
end 
// expected S1[ 13 ]
initial
begin
	S1_expected[13] = 1'bX;
end 
// expected S1[ 12 ]
initial
begin
	S1_expected[12] = 1'bX;
end 
// expected S1[ 11 ]
initial
begin
	S1_expected[11] = 1'bX;
end 
// expected S1[ 10 ]
initial
begin
	S1_expected[10] = 1'bX;
end 
// expected S1[ 9 ]
initial
begin
	S1_expected[9] = 1'bX;
end 
// expected S1[ 8 ]
initial
begin
	S1_expected[8] = 1'bX;
end 
// expected S1[ 7 ]
initial
begin
	S1_expected[7] = 1'bX;
end 
// expected S1[ 6 ]
initial
begin
	S1_expected[6] = 1'bX;
end 
// expected S1[ 5 ]
initial
begin
	S1_expected[5] = 1'bX;
end 
// expected S1[ 4 ]
initial
begin
	S1_expected[4] = 1'bX;
end 
// expected S1[ 3 ]
initial
begin
	S1_expected[3] = 1'bX;
end 
// expected S1[ 2 ]
initial
begin
	S1_expected[2] = 1'bX;
end 
// expected S1[ 1 ]
initial
begin
	S1_expected[1] = 1'bX;
end 
// expected S1[ 0 ]
initial
begin
	S1_expected[0] = 1'bX;
end 
// expected S2[ 15 ]
initial
begin
	S2_expected[15] = 1'bX;
end 
// expected S2[ 14 ]
initial
begin
	S2_expected[14] = 1'bX;
end 
// expected S2[ 13 ]
initial
begin
	S2_expected[13] = 1'bX;
end 
// expected S2[ 12 ]
initial
begin
	S2_expected[12] = 1'bX;
end 
// expected S2[ 11 ]
initial
begin
	S2_expected[11] = 1'bX;
end 
// expected S2[ 10 ]
initial
begin
	S2_expected[10] = 1'bX;
end 
// expected S2[ 9 ]
initial
begin
	S2_expected[9] = 1'bX;
end 
// expected S2[ 8 ]
initial
begin
	S2_expected[8] = 1'bX;
end 
// expected S2[ 7 ]
initial
begin
	S2_expected[7] = 1'bX;
end 
// expected S2[ 6 ]
initial
begin
	S2_expected[6] = 1'bX;
end 
// expected S2[ 5 ]
initial
begin
	S2_expected[5] = 1'bX;
end 
// expected S2[ 4 ]
initial
begin
	S2_expected[4] = 1'bX;
end 
// expected S2[ 3 ]
initial
begin
	S2_expected[3] = 1'bX;
end 
// expected S2[ 2 ]
initial
begin
	S2_expected[2] = 1'bX;
end 
// expected S2[ 1 ]
initial
begin
	S2_expected[1] = 1'bX;
end 
// expected S2[ 0 ]
initial
begin
	S2_expected[0] = 1'bX;
end 
// expected O[ 15 ]
initial
begin
	O_expected[15] = 1'bX;
end 
// expected O[ 14 ]
initial
begin
	O_expected[14] = 1'bX;
end 
// expected O[ 13 ]
initial
begin
	O_expected[13] = 1'bX;
end 
// expected O[ 12 ]
initial
begin
	O_expected[12] = 1'bX;
end 
// expected O[ 11 ]
initial
begin
	O_expected[11] = 1'bX;
end 
// expected O[ 10 ]
initial
begin
	O_expected[10] = 1'bX;
end 
// expected O[ 9 ]
initial
begin
	O_expected[9] = 1'bX;
end 
// expected O[ 8 ]
initial
begin
	O_expected[8] = 1'bX;
end 
// expected O[ 7 ]
initial
begin
	O_expected[7] = 1'bX;
end 
// expected O[ 6 ]
initial
begin
	O_expected[6] = 1'bX;
end 
// expected O[ 5 ]
initial
begin
	O_expected[5] = 1'bX;
end 
// expected O[ 4 ]
initial
begin
	O_expected[4] = 1'bX;
end 
// expected O[ 3 ]
initial
begin
	O_expected[3] = 1'bX;
end 
// expected O[ 2 ]
initial
begin
	O_expected[2] = 1'bX;
end 
// expected O[ 1 ]
initial
begin
	O_expected[1] = 1'bX;
end 
// expected O[ 0 ]
initial
begin
	O_expected[0] = 1'bX;
end 
// generate trigger
always @(AU1_expected or AU1 or AU2_expected or AU2 or O_expected or O or R1_expected or R1 or R2_expected or R2 or R3_expected or R3 or R4_expected or R4 or R5_expected or R5 or S1_expected or S1 or S2_expected or S2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AU1 = %b | expected AU2 = %b | expected O = %b | expected R1 = %b | expected R2 = %b | expected R3 = %b | expected R4 = %b | expected R5 = %b | expected S1 = %b | expected S2 = %b | ",AU1_expected_prev,AU2_expected_prev,O_expected_prev,R1_expected_prev,R2_expected_prev,R3_expected_prev,R4_expected_prev,R5_expected_prev,S1_expected_prev,S2_expected_prev);
	$display("| real AU1 = %b | real AU2 = %b | real O = %b | real R1 = %b | real R2 = %b | real R3 = %b | real R4 = %b | real R5 = %b | real S1 = %b | real S2 = %b | ",AU1_prev,AU2_prev,O_prev,R1_prev,R2_prev,R3_prev,R4_prev,R5_prev,S1_prev,S2_prev);
`endif
	if (
		( AU1_expected_prev[0] !== 1'bx ) && ( AU1_prev[0] !== AU1_expected_prev[0] )
		&& ((AU1_expected_prev[0] !== last_AU1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[0] = AU1_expected_prev[0];
	end
	if (
		( AU1_expected_prev[1] !== 1'bx ) && ( AU1_prev[1] !== AU1_expected_prev[1] )
		&& ((AU1_expected_prev[1] !== last_AU1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[1] = AU1_expected_prev[1];
	end
	if (
		( AU1_expected_prev[2] !== 1'bx ) && ( AU1_prev[2] !== AU1_expected_prev[2] )
		&& ((AU1_expected_prev[2] !== last_AU1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[2] = AU1_expected_prev[2];
	end
	if (
		( AU1_expected_prev[3] !== 1'bx ) && ( AU1_prev[3] !== AU1_expected_prev[3] )
		&& ((AU1_expected_prev[3] !== last_AU1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[3] = AU1_expected_prev[3];
	end
	if (
		( AU1_expected_prev[4] !== 1'bx ) && ( AU1_prev[4] !== AU1_expected_prev[4] )
		&& ((AU1_expected_prev[4] !== last_AU1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[4] = AU1_expected_prev[4];
	end
	if (
		( AU1_expected_prev[5] !== 1'bx ) && ( AU1_prev[5] !== AU1_expected_prev[5] )
		&& ((AU1_expected_prev[5] !== last_AU1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[5] = AU1_expected_prev[5];
	end
	if (
		( AU1_expected_prev[6] !== 1'bx ) && ( AU1_prev[6] !== AU1_expected_prev[6] )
		&& ((AU1_expected_prev[6] !== last_AU1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[6] = AU1_expected_prev[6];
	end
	if (
		( AU1_expected_prev[7] !== 1'bx ) && ( AU1_prev[7] !== AU1_expected_prev[7] )
		&& ((AU1_expected_prev[7] !== last_AU1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[7] = AU1_expected_prev[7];
	end
	if (
		( AU1_expected_prev[8] !== 1'bx ) && ( AU1_prev[8] !== AU1_expected_prev[8] )
		&& ((AU1_expected_prev[8] !== last_AU1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[8] = AU1_expected_prev[8];
	end
	if (
		( AU1_expected_prev[9] !== 1'bx ) && ( AU1_prev[9] !== AU1_expected_prev[9] )
		&& ((AU1_expected_prev[9] !== last_AU1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[9] = AU1_expected_prev[9];
	end
	if (
		( AU1_expected_prev[10] !== 1'bx ) && ( AU1_prev[10] !== AU1_expected_prev[10] )
		&& ((AU1_expected_prev[10] !== last_AU1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[10] = AU1_expected_prev[10];
	end
	if (
		( AU1_expected_prev[11] !== 1'bx ) && ( AU1_prev[11] !== AU1_expected_prev[11] )
		&& ((AU1_expected_prev[11] !== last_AU1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[11] = AU1_expected_prev[11];
	end
	if (
		( AU1_expected_prev[12] !== 1'bx ) && ( AU1_prev[12] !== AU1_expected_prev[12] )
		&& ((AU1_expected_prev[12] !== last_AU1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[12] = AU1_expected_prev[12];
	end
	if (
		( AU1_expected_prev[13] !== 1'bx ) && ( AU1_prev[13] !== AU1_expected_prev[13] )
		&& ((AU1_expected_prev[13] !== last_AU1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[13] = AU1_expected_prev[13];
	end
	if (
		( AU1_expected_prev[14] !== 1'bx ) && ( AU1_prev[14] !== AU1_expected_prev[14] )
		&& ((AU1_expected_prev[14] !== last_AU1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[14] = AU1_expected_prev[14];
	end
	if (
		( AU1_expected_prev[15] !== 1'bx ) && ( AU1_prev[15] !== AU1_expected_prev[15] )
		&& ((AU1_expected_prev[15] !== last_AU1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU1_expected_prev);
		$display ("     Real value = %b", AU1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AU1_exp[15] = AU1_expected_prev[15];
	end
	if (
		( AU2_expected_prev[0] !== 1'bx ) && ( AU2_prev[0] !== AU2_expected_prev[0] )
		&& ((AU2_expected_prev[0] !== last_AU2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[0] = AU2_expected_prev[0];
	end
	if (
		( AU2_expected_prev[1] !== 1'bx ) && ( AU2_prev[1] !== AU2_expected_prev[1] )
		&& ((AU2_expected_prev[1] !== last_AU2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[1] = AU2_expected_prev[1];
	end
	if (
		( AU2_expected_prev[2] !== 1'bx ) && ( AU2_prev[2] !== AU2_expected_prev[2] )
		&& ((AU2_expected_prev[2] !== last_AU2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[2] = AU2_expected_prev[2];
	end
	if (
		( AU2_expected_prev[3] !== 1'bx ) && ( AU2_prev[3] !== AU2_expected_prev[3] )
		&& ((AU2_expected_prev[3] !== last_AU2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[3] = AU2_expected_prev[3];
	end
	if (
		( AU2_expected_prev[4] !== 1'bx ) && ( AU2_prev[4] !== AU2_expected_prev[4] )
		&& ((AU2_expected_prev[4] !== last_AU2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[4] = AU2_expected_prev[4];
	end
	if (
		( AU2_expected_prev[5] !== 1'bx ) && ( AU2_prev[5] !== AU2_expected_prev[5] )
		&& ((AU2_expected_prev[5] !== last_AU2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[5] = AU2_expected_prev[5];
	end
	if (
		( AU2_expected_prev[6] !== 1'bx ) && ( AU2_prev[6] !== AU2_expected_prev[6] )
		&& ((AU2_expected_prev[6] !== last_AU2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[6] = AU2_expected_prev[6];
	end
	if (
		( AU2_expected_prev[7] !== 1'bx ) && ( AU2_prev[7] !== AU2_expected_prev[7] )
		&& ((AU2_expected_prev[7] !== last_AU2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[7] = AU2_expected_prev[7];
	end
	if (
		( AU2_expected_prev[8] !== 1'bx ) && ( AU2_prev[8] !== AU2_expected_prev[8] )
		&& ((AU2_expected_prev[8] !== last_AU2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[8] = AU2_expected_prev[8];
	end
	if (
		( AU2_expected_prev[9] !== 1'bx ) && ( AU2_prev[9] !== AU2_expected_prev[9] )
		&& ((AU2_expected_prev[9] !== last_AU2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[9] = AU2_expected_prev[9];
	end
	if (
		( AU2_expected_prev[10] !== 1'bx ) && ( AU2_prev[10] !== AU2_expected_prev[10] )
		&& ((AU2_expected_prev[10] !== last_AU2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[10] = AU2_expected_prev[10];
	end
	if (
		( AU2_expected_prev[11] !== 1'bx ) && ( AU2_prev[11] !== AU2_expected_prev[11] )
		&& ((AU2_expected_prev[11] !== last_AU2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[11] = AU2_expected_prev[11];
	end
	if (
		( AU2_expected_prev[12] !== 1'bx ) && ( AU2_prev[12] !== AU2_expected_prev[12] )
		&& ((AU2_expected_prev[12] !== last_AU2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[12] = AU2_expected_prev[12];
	end
	if (
		( AU2_expected_prev[13] !== 1'bx ) && ( AU2_prev[13] !== AU2_expected_prev[13] )
		&& ((AU2_expected_prev[13] !== last_AU2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[13] = AU2_expected_prev[13];
	end
	if (
		( AU2_expected_prev[14] !== 1'bx ) && ( AU2_prev[14] !== AU2_expected_prev[14] )
		&& ((AU2_expected_prev[14] !== last_AU2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[14] = AU2_expected_prev[14];
	end
	if (
		( AU2_expected_prev[15] !== 1'bx ) && ( AU2_prev[15] !== AU2_expected_prev[15] )
		&& ((AU2_expected_prev[15] !== last_AU2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AU2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AU2_expected_prev);
		$display ("     Real value = %b", AU2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AU2_exp[15] = AU2_expected_prev[15];
	end
	if (
		( O_expected_prev[0] !== 1'bx ) && ( O_prev[0] !== O_expected_prev[0] )
		&& ((O_expected_prev[0] !== last_O_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[0] = O_expected_prev[0];
	end
	if (
		( O_expected_prev[1] !== 1'bx ) && ( O_prev[1] !== O_expected_prev[1] )
		&& ((O_expected_prev[1] !== last_O_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[1] = O_expected_prev[1];
	end
	if (
		( O_expected_prev[2] !== 1'bx ) && ( O_prev[2] !== O_expected_prev[2] )
		&& ((O_expected_prev[2] !== last_O_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[2] = O_expected_prev[2];
	end
	if (
		( O_expected_prev[3] !== 1'bx ) && ( O_prev[3] !== O_expected_prev[3] )
		&& ((O_expected_prev[3] !== last_O_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[3] = O_expected_prev[3];
	end
	if (
		( O_expected_prev[4] !== 1'bx ) && ( O_prev[4] !== O_expected_prev[4] )
		&& ((O_expected_prev[4] !== last_O_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[4] = O_expected_prev[4];
	end
	if (
		( O_expected_prev[5] !== 1'bx ) && ( O_prev[5] !== O_expected_prev[5] )
		&& ((O_expected_prev[5] !== last_O_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[5] = O_expected_prev[5];
	end
	if (
		( O_expected_prev[6] !== 1'bx ) && ( O_prev[6] !== O_expected_prev[6] )
		&& ((O_expected_prev[6] !== last_O_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[6] = O_expected_prev[6];
	end
	if (
		( O_expected_prev[7] !== 1'bx ) && ( O_prev[7] !== O_expected_prev[7] )
		&& ((O_expected_prev[7] !== last_O_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[7] = O_expected_prev[7];
	end
	if (
		( O_expected_prev[8] !== 1'bx ) && ( O_prev[8] !== O_expected_prev[8] )
		&& ((O_expected_prev[8] !== last_O_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[8] = O_expected_prev[8];
	end
	if (
		( O_expected_prev[9] !== 1'bx ) && ( O_prev[9] !== O_expected_prev[9] )
		&& ((O_expected_prev[9] !== last_O_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[9] = O_expected_prev[9];
	end
	if (
		( O_expected_prev[10] !== 1'bx ) && ( O_prev[10] !== O_expected_prev[10] )
		&& ((O_expected_prev[10] !== last_O_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[10] = O_expected_prev[10];
	end
	if (
		( O_expected_prev[11] !== 1'bx ) && ( O_prev[11] !== O_expected_prev[11] )
		&& ((O_expected_prev[11] !== last_O_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[11] = O_expected_prev[11];
	end
	if (
		( O_expected_prev[12] !== 1'bx ) && ( O_prev[12] !== O_expected_prev[12] )
		&& ((O_expected_prev[12] !== last_O_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[12] = O_expected_prev[12];
	end
	if (
		( O_expected_prev[13] !== 1'bx ) && ( O_prev[13] !== O_expected_prev[13] )
		&& ((O_expected_prev[13] !== last_O_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[13] = O_expected_prev[13];
	end
	if (
		( O_expected_prev[14] !== 1'bx ) && ( O_prev[14] !== O_expected_prev[14] )
		&& ((O_expected_prev[14] !== last_O_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[14] = O_expected_prev[14];
	end
	if (
		( O_expected_prev[15] !== 1'bx ) && ( O_prev[15] !== O_expected_prev[15] )
		&& ((O_expected_prev[15] !== last_O_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_O_exp[15] = O_expected_prev[15];
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R1_expected_prev[8] !== 1'bx ) && ( R1_prev[8] !== R1_expected_prev[8] )
		&& ((R1_expected_prev[8] !== last_R1_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[8] = R1_expected_prev[8];
	end
	if (
		( R1_expected_prev[9] !== 1'bx ) && ( R1_prev[9] !== R1_expected_prev[9] )
		&& ((R1_expected_prev[9] !== last_R1_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[9] = R1_expected_prev[9];
	end
	if (
		( R1_expected_prev[10] !== 1'bx ) && ( R1_prev[10] !== R1_expected_prev[10] )
		&& ((R1_expected_prev[10] !== last_R1_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[10] = R1_expected_prev[10];
	end
	if (
		( R1_expected_prev[11] !== 1'bx ) && ( R1_prev[11] !== R1_expected_prev[11] )
		&& ((R1_expected_prev[11] !== last_R1_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[11] = R1_expected_prev[11];
	end
	if (
		( R1_expected_prev[12] !== 1'bx ) && ( R1_prev[12] !== R1_expected_prev[12] )
		&& ((R1_expected_prev[12] !== last_R1_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[12] = R1_expected_prev[12];
	end
	if (
		( R1_expected_prev[13] !== 1'bx ) && ( R1_prev[13] !== R1_expected_prev[13] )
		&& ((R1_expected_prev[13] !== last_R1_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[13] = R1_expected_prev[13];
	end
	if (
		( R1_expected_prev[14] !== 1'bx ) && ( R1_prev[14] !== R1_expected_prev[14] )
		&& ((R1_expected_prev[14] !== last_R1_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[14] = R1_expected_prev[14];
	end
	if (
		( R1_expected_prev[15] !== 1'bx ) && ( R1_prev[15] !== R1_expected_prev[15] )
		&& ((R1_expected_prev[15] !== last_R1_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R1_exp[15] = R1_expected_prev[15];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( R2_expected_prev[8] !== 1'bx ) && ( R2_prev[8] !== R2_expected_prev[8] )
		&& ((R2_expected_prev[8] !== last_R2_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[8] = R2_expected_prev[8];
	end
	if (
		( R2_expected_prev[9] !== 1'bx ) && ( R2_prev[9] !== R2_expected_prev[9] )
		&& ((R2_expected_prev[9] !== last_R2_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[9] = R2_expected_prev[9];
	end
	if (
		( R2_expected_prev[10] !== 1'bx ) && ( R2_prev[10] !== R2_expected_prev[10] )
		&& ((R2_expected_prev[10] !== last_R2_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[10] = R2_expected_prev[10];
	end
	if (
		( R2_expected_prev[11] !== 1'bx ) && ( R2_prev[11] !== R2_expected_prev[11] )
		&& ((R2_expected_prev[11] !== last_R2_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[11] = R2_expected_prev[11];
	end
	if (
		( R2_expected_prev[12] !== 1'bx ) && ( R2_prev[12] !== R2_expected_prev[12] )
		&& ((R2_expected_prev[12] !== last_R2_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[12] = R2_expected_prev[12];
	end
	if (
		( R2_expected_prev[13] !== 1'bx ) && ( R2_prev[13] !== R2_expected_prev[13] )
		&& ((R2_expected_prev[13] !== last_R2_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[13] = R2_expected_prev[13];
	end
	if (
		( R2_expected_prev[14] !== 1'bx ) && ( R2_prev[14] !== R2_expected_prev[14] )
		&& ((R2_expected_prev[14] !== last_R2_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[14] = R2_expected_prev[14];
	end
	if (
		( R2_expected_prev[15] !== 1'bx ) && ( R2_prev[15] !== R2_expected_prev[15] )
		&& ((R2_expected_prev[15] !== last_R2_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R2_exp[15] = R2_expected_prev[15];
	end
	if (
		( R3_expected_prev[0] !== 1'bx ) && ( R3_prev[0] !== R3_expected_prev[0] )
		&& ((R3_expected_prev[0] !== last_R3_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[0] = R3_expected_prev[0];
	end
	if (
		( R3_expected_prev[1] !== 1'bx ) && ( R3_prev[1] !== R3_expected_prev[1] )
		&& ((R3_expected_prev[1] !== last_R3_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[1] = R3_expected_prev[1];
	end
	if (
		( R3_expected_prev[2] !== 1'bx ) && ( R3_prev[2] !== R3_expected_prev[2] )
		&& ((R3_expected_prev[2] !== last_R3_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[2] = R3_expected_prev[2];
	end
	if (
		( R3_expected_prev[3] !== 1'bx ) && ( R3_prev[3] !== R3_expected_prev[3] )
		&& ((R3_expected_prev[3] !== last_R3_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[3] = R3_expected_prev[3];
	end
	if (
		( R3_expected_prev[4] !== 1'bx ) && ( R3_prev[4] !== R3_expected_prev[4] )
		&& ((R3_expected_prev[4] !== last_R3_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[4] = R3_expected_prev[4];
	end
	if (
		( R3_expected_prev[5] !== 1'bx ) && ( R3_prev[5] !== R3_expected_prev[5] )
		&& ((R3_expected_prev[5] !== last_R3_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[5] = R3_expected_prev[5];
	end
	if (
		( R3_expected_prev[6] !== 1'bx ) && ( R3_prev[6] !== R3_expected_prev[6] )
		&& ((R3_expected_prev[6] !== last_R3_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[6] = R3_expected_prev[6];
	end
	if (
		( R3_expected_prev[7] !== 1'bx ) && ( R3_prev[7] !== R3_expected_prev[7] )
		&& ((R3_expected_prev[7] !== last_R3_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[7] = R3_expected_prev[7];
	end
	if (
		( R3_expected_prev[8] !== 1'bx ) && ( R3_prev[8] !== R3_expected_prev[8] )
		&& ((R3_expected_prev[8] !== last_R3_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[8] = R3_expected_prev[8];
	end
	if (
		( R3_expected_prev[9] !== 1'bx ) && ( R3_prev[9] !== R3_expected_prev[9] )
		&& ((R3_expected_prev[9] !== last_R3_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[9] = R3_expected_prev[9];
	end
	if (
		( R3_expected_prev[10] !== 1'bx ) && ( R3_prev[10] !== R3_expected_prev[10] )
		&& ((R3_expected_prev[10] !== last_R3_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[10] = R3_expected_prev[10];
	end
	if (
		( R3_expected_prev[11] !== 1'bx ) && ( R3_prev[11] !== R3_expected_prev[11] )
		&& ((R3_expected_prev[11] !== last_R3_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[11] = R3_expected_prev[11];
	end
	if (
		( R3_expected_prev[12] !== 1'bx ) && ( R3_prev[12] !== R3_expected_prev[12] )
		&& ((R3_expected_prev[12] !== last_R3_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[12] = R3_expected_prev[12];
	end
	if (
		( R3_expected_prev[13] !== 1'bx ) && ( R3_prev[13] !== R3_expected_prev[13] )
		&& ((R3_expected_prev[13] !== last_R3_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[13] = R3_expected_prev[13];
	end
	if (
		( R3_expected_prev[14] !== 1'bx ) && ( R3_prev[14] !== R3_expected_prev[14] )
		&& ((R3_expected_prev[14] !== last_R3_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[14] = R3_expected_prev[14];
	end
	if (
		( R3_expected_prev[15] !== 1'bx ) && ( R3_prev[15] !== R3_expected_prev[15] )
		&& ((R3_expected_prev[15] !== last_R3_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R3_expected_prev);
		$display ("     Real value = %b", R3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R3_exp[15] = R3_expected_prev[15];
	end
	if (
		( R4_expected_prev[0] !== 1'bx ) && ( R4_prev[0] !== R4_expected_prev[0] )
		&& ((R4_expected_prev[0] !== last_R4_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[0] = R4_expected_prev[0];
	end
	if (
		( R4_expected_prev[1] !== 1'bx ) && ( R4_prev[1] !== R4_expected_prev[1] )
		&& ((R4_expected_prev[1] !== last_R4_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[1] = R4_expected_prev[1];
	end
	if (
		( R4_expected_prev[2] !== 1'bx ) && ( R4_prev[2] !== R4_expected_prev[2] )
		&& ((R4_expected_prev[2] !== last_R4_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[2] = R4_expected_prev[2];
	end
	if (
		( R4_expected_prev[3] !== 1'bx ) && ( R4_prev[3] !== R4_expected_prev[3] )
		&& ((R4_expected_prev[3] !== last_R4_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[3] = R4_expected_prev[3];
	end
	if (
		( R4_expected_prev[4] !== 1'bx ) && ( R4_prev[4] !== R4_expected_prev[4] )
		&& ((R4_expected_prev[4] !== last_R4_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[4] = R4_expected_prev[4];
	end
	if (
		( R4_expected_prev[5] !== 1'bx ) && ( R4_prev[5] !== R4_expected_prev[5] )
		&& ((R4_expected_prev[5] !== last_R4_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[5] = R4_expected_prev[5];
	end
	if (
		( R4_expected_prev[6] !== 1'bx ) && ( R4_prev[6] !== R4_expected_prev[6] )
		&& ((R4_expected_prev[6] !== last_R4_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[6] = R4_expected_prev[6];
	end
	if (
		( R4_expected_prev[7] !== 1'bx ) && ( R4_prev[7] !== R4_expected_prev[7] )
		&& ((R4_expected_prev[7] !== last_R4_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[7] = R4_expected_prev[7];
	end
	if (
		( R4_expected_prev[8] !== 1'bx ) && ( R4_prev[8] !== R4_expected_prev[8] )
		&& ((R4_expected_prev[8] !== last_R4_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[8] = R4_expected_prev[8];
	end
	if (
		( R4_expected_prev[9] !== 1'bx ) && ( R4_prev[9] !== R4_expected_prev[9] )
		&& ((R4_expected_prev[9] !== last_R4_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[9] = R4_expected_prev[9];
	end
	if (
		( R4_expected_prev[10] !== 1'bx ) && ( R4_prev[10] !== R4_expected_prev[10] )
		&& ((R4_expected_prev[10] !== last_R4_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[10] = R4_expected_prev[10];
	end
	if (
		( R4_expected_prev[11] !== 1'bx ) && ( R4_prev[11] !== R4_expected_prev[11] )
		&& ((R4_expected_prev[11] !== last_R4_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[11] = R4_expected_prev[11];
	end
	if (
		( R4_expected_prev[12] !== 1'bx ) && ( R4_prev[12] !== R4_expected_prev[12] )
		&& ((R4_expected_prev[12] !== last_R4_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[12] = R4_expected_prev[12];
	end
	if (
		( R4_expected_prev[13] !== 1'bx ) && ( R4_prev[13] !== R4_expected_prev[13] )
		&& ((R4_expected_prev[13] !== last_R4_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[13] = R4_expected_prev[13];
	end
	if (
		( R4_expected_prev[14] !== 1'bx ) && ( R4_prev[14] !== R4_expected_prev[14] )
		&& ((R4_expected_prev[14] !== last_R4_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[14] = R4_expected_prev[14];
	end
	if (
		( R4_expected_prev[15] !== 1'bx ) && ( R4_prev[15] !== R4_expected_prev[15] )
		&& ((R4_expected_prev[15] !== last_R4_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R4_expected_prev);
		$display ("     Real value = %b", R4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R4_exp[15] = R4_expected_prev[15];
	end
	if (
		( R5_expected_prev[0] !== 1'bx ) && ( R5_prev[0] !== R5_expected_prev[0] )
		&& ((R5_expected_prev[0] !== last_R5_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[0] = R5_expected_prev[0];
	end
	if (
		( R5_expected_prev[1] !== 1'bx ) && ( R5_prev[1] !== R5_expected_prev[1] )
		&& ((R5_expected_prev[1] !== last_R5_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[1] = R5_expected_prev[1];
	end
	if (
		( R5_expected_prev[2] !== 1'bx ) && ( R5_prev[2] !== R5_expected_prev[2] )
		&& ((R5_expected_prev[2] !== last_R5_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[2] = R5_expected_prev[2];
	end
	if (
		( R5_expected_prev[3] !== 1'bx ) && ( R5_prev[3] !== R5_expected_prev[3] )
		&& ((R5_expected_prev[3] !== last_R5_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[3] = R5_expected_prev[3];
	end
	if (
		( R5_expected_prev[4] !== 1'bx ) && ( R5_prev[4] !== R5_expected_prev[4] )
		&& ((R5_expected_prev[4] !== last_R5_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[4] = R5_expected_prev[4];
	end
	if (
		( R5_expected_prev[5] !== 1'bx ) && ( R5_prev[5] !== R5_expected_prev[5] )
		&& ((R5_expected_prev[5] !== last_R5_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[5] = R5_expected_prev[5];
	end
	if (
		( R5_expected_prev[6] !== 1'bx ) && ( R5_prev[6] !== R5_expected_prev[6] )
		&& ((R5_expected_prev[6] !== last_R5_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[6] = R5_expected_prev[6];
	end
	if (
		( R5_expected_prev[7] !== 1'bx ) && ( R5_prev[7] !== R5_expected_prev[7] )
		&& ((R5_expected_prev[7] !== last_R5_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[7] = R5_expected_prev[7];
	end
	if (
		( R5_expected_prev[8] !== 1'bx ) && ( R5_prev[8] !== R5_expected_prev[8] )
		&& ((R5_expected_prev[8] !== last_R5_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[8] = R5_expected_prev[8];
	end
	if (
		( R5_expected_prev[9] !== 1'bx ) && ( R5_prev[9] !== R5_expected_prev[9] )
		&& ((R5_expected_prev[9] !== last_R5_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[9] = R5_expected_prev[9];
	end
	if (
		( R5_expected_prev[10] !== 1'bx ) && ( R5_prev[10] !== R5_expected_prev[10] )
		&& ((R5_expected_prev[10] !== last_R5_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[10] = R5_expected_prev[10];
	end
	if (
		( R5_expected_prev[11] !== 1'bx ) && ( R5_prev[11] !== R5_expected_prev[11] )
		&& ((R5_expected_prev[11] !== last_R5_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[11] = R5_expected_prev[11];
	end
	if (
		( R5_expected_prev[12] !== 1'bx ) && ( R5_prev[12] !== R5_expected_prev[12] )
		&& ((R5_expected_prev[12] !== last_R5_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[12] = R5_expected_prev[12];
	end
	if (
		( R5_expected_prev[13] !== 1'bx ) && ( R5_prev[13] !== R5_expected_prev[13] )
		&& ((R5_expected_prev[13] !== last_R5_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[13] = R5_expected_prev[13];
	end
	if (
		( R5_expected_prev[14] !== 1'bx ) && ( R5_prev[14] !== R5_expected_prev[14] )
		&& ((R5_expected_prev[14] !== last_R5_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[14] = R5_expected_prev[14];
	end
	if (
		( R5_expected_prev[15] !== 1'bx ) && ( R5_prev[15] !== R5_expected_prev[15] )
		&& ((R5_expected_prev[15] !== last_R5_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R5[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R5_expected_prev);
		$display ("     Real value = %b", R5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R5_exp[15] = R5_expected_prev[15];
	end
	if (
		( S1_expected_prev[0] !== 1'bx ) && ( S1_prev[0] !== S1_expected_prev[0] )
		&& ((S1_expected_prev[0] !== last_S1_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[0] = S1_expected_prev[0];
	end
	if (
		( S1_expected_prev[1] !== 1'bx ) && ( S1_prev[1] !== S1_expected_prev[1] )
		&& ((S1_expected_prev[1] !== last_S1_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[1] = S1_expected_prev[1];
	end
	if (
		( S1_expected_prev[2] !== 1'bx ) && ( S1_prev[2] !== S1_expected_prev[2] )
		&& ((S1_expected_prev[2] !== last_S1_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[2] = S1_expected_prev[2];
	end
	if (
		( S1_expected_prev[3] !== 1'bx ) && ( S1_prev[3] !== S1_expected_prev[3] )
		&& ((S1_expected_prev[3] !== last_S1_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[3] = S1_expected_prev[3];
	end
	if (
		( S1_expected_prev[4] !== 1'bx ) && ( S1_prev[4] !== S1_expected_prev[4] )
		&& ((S1_expected_prev[4] !== last_S1_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[4] = S1_expected_prev[4];
	end
	if (
		( S1_expected_prev[5] !== 1'bx ) && ( S1_prev[5] !== S1_expected_prev[5] )
		&& ((S1_expected_prev[5] !== last_S1_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[5] = S1_expected_prev[5];
	end
	if (
		( S1_expected_prev[6] !== 1'bx ) && ( S1_prev[6] !== S1_expected_prev[6] )
		&& ((S1_expected_prev[6] !== last_S1_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[6] = S1_expected_prev[6];
	end
	if (
		( S1_expected_prev[7] !== 1'bx ) && ( S1_prev[7] !== S1_expected_prev[7] )
		&& ((S1_expected_prev[7] !== last_S1_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[7] = S1_expected_prev[7];
	end
	if (
		( S1_expected_prev[8] !== 1'bx ) && ( S1_prev[8] !== S1_expected_prev[8] )
		&& ((S1_expected_prev[8] !== last_S1_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[8] = S1_expected_prev[8];
	end
	if (
		( S1_expected_prev[9] !== 1'bx ) && ( S1_prev[9] !== S1_expected_prev[9] )
		&& ((S1_expected_prev[9] !== last_S1_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[9] = S1_expected_prev[9];
	end
	if (
		( S1_expected_prev[10] !== 1'bx ) && ( S1_prev[10] !== S1_expected_prev[10] )
		&& ((S1_expected_prev[10] !== last_S1_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[10] = S1_expected_prev[10];
	end
	if (
		( S1_expected_prev[11] !== 1'bx ) && ( S1_prev[11] !== S1_expected_prev[11] )
		&& ((S1_expected_prev[11] !== last_S1_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[11] = S1_expected_prev[11];
	end
	if (
		( S1_expected_prev[12] !== 1'bx ) && ( S1_prev[12] !== S1_expected_prev[12] )
		&& ((S1_expected_prev[12] !== last_S1_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[12] = S1_expected_prev[12];
	end
	if (
		( S1_expected_prev[13] !== 1'bx ) && ( S1_prev[13] !== S1_expected_prev[13] )
		&& ((S1_expected_prev[13] !== last_S1_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[13] = S1_expected_prev[13];
	end
	if (
		( S1_expected_prev[14] !== 1'bx ) && ( S1_prev[14] !== S1_expected_prev[14] )
		&& ((S1_expected_prev[14] !== last_S1_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[14] = S1_expected_prev[14];
	end
	if (
		( S1_expected_prev[15] !== 1'bx ) && ( S1_prev[15] !== S1_expected_prev[15] )
		&& ((S1_expected_prev[15] !== last_S1_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_S1_exp[15] = S1_expected_prev[15];
	end
	if (
		( S2_expected_prev[0] !== 1'bx ) && ( S2_prev[0] !== S2_expected_prev[0] )
		&& ((S2_expected_prev[0] !== last_S2_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[0] = S2_expected_prev[0];
	end
	if (
		( S2_expected_prev[1] !== 1'bx ) && ( S2_prev[1] !== S2_expected_prev[1] )
		&& ((S2_expected_prev[1] !== last_S2_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[1] = S2_expected_prev[1];
	end
	if (
		( S2_expected_prev[2] !== 1'bx ) && ( S2_prev[2] !== S2_expected_prev[2] )
		&& ((S2_expected_prev[2] !== last_S2_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[2] = S2_expected_prev[2];
	end
	if (
		( S2_expected_prev[3] !== 1'bx ) && ( S2_prev[3] !== S2_expected_prev[3] )
		&& ((S2_expected_prev[3] !== last_S2_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[3] = S2_expected_prev[3];
	end
	if (
		( S2_expected_prev[4] !== 1'bx ) && ( S2_prev[4] !== S2_expected_prev[4] )
		&& ((S2_expected_prev[4] !== last_S2_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[4] = S2_expected_prev[4];
	end
	if (
		( S2_expected_prev[5] !== 1'bx ) && ( S2_prev[5] !== S2_expected_prev[5] )
		&& ((S2_expected_prev[5] !== last_S2_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[5] = S2_expected_prev[5];
	end
	if (
		( S2_expected_prev[6] !== 1'bx ) && ( S2_prev[6] !== S2_expected_prev[6] )
		&& ((S2_expected_prev[6] !== last_S2_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[6] = S2_expected_prev[6];
	end
	if (
		( S2_expected_prev[7] !== 1'bx ) && ( S2_prev[7] !== S2_expected_prev[7] )
		&& ((S2_expected_prev[7] !== last_S2_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[7] = S2_expected_prev[7];
	end
	if (
		( S2_expected_prev[8] !== 1'bx ) && ( S2_prev[8] !== S2_expected_prev[8] )
		&& ((S2_expected_prev[8] !== last_S2_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[8] = S2_expected_prev[8];
	end
	if (
		( S2_expected_prev[9] !== 1'bx ) && ( S2_prev[9] !== S2_expected_prev[9] )
		&& ((S2_expected_prev[9] !== last_S2_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[9] = S2_expected_prev[9];
	end
	if (
		( S2_expected_prev[10] !== 1'bx ) && ( S2_prev[10] !== S2_expected_prev[10] )
		&& ((S2_expected_prev[10] !== last_S2_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[10] = S2_expected_prev[10];
	end
	if (
		( S2_expected_prev[11] !== 1'bx ) && ( S2_prev[11] !== S2_expected_prev[11] )
		&& ((S2_expected_prev[11] !== last_S2_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[11] = S2_expected_prev[11];
	end
	if (
		( S2_expected_prev[12] !== 1'bx ) && ( S2_prev[12] !== S2_expected_prev[12] )
		&& ((S2_expected_prev[12] !== last_S2_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[12] = S2_expected_prev[12];
	end
	if (
		( S2_expected_prev[13] !== 1'bx ) && ( S2_prev[13] !== S2_expected_prev[13] )
		&& ((S2_expected_prev[13] !== last_S2_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[13] = S2_expected_prev[13];
	end
	if (
		( S2_expected_prev[14] !== 1'bx ) && ( S2_prev[14] !== S2_expected_prev[14] )
		&& ((S2_expected_prev[14] !== last_S2_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[14] = S2_expected_prev[14];
	end
	if (
		( S2_expected_prev[15] !== 1'bx ) && ( S2_prev[15] !== S2_expected_prev[15] )
		&& ((S2_expected_prev[15] !== last_S2_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S2_exp[15] = S2_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg [15:0] B;
reg Clk;
reg [4:0] Load;
reg [11:0] OE;
reg [1:0] Op1;
reg [1:0] Op2;
// wires                                               
wire [15:0] AU1;
wire [15:0] AU2;
wire [15:0] O;
wire [15:0] R1;
wire [15:0] R2;
wire [15:0] R3;
wire [15:0] R4;
wire [15:0] R5;
wire [15:0] S1;
wire [15:0] S2;

wire sampler;                             

// assign statements (if any)                          
Datapath i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AU1(AU1),
	.AU2(AU2),
	.B(B),
	.Clk(Clk),
	.Load(Load),
	.O(O),
	.OE(OE),
	.Op1(Op1),
	.Op2(Op2),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.S1(S1),
	.S2(S2)
);

// Clk
initial
begin
	repeat(12)
	begin
		Clk = 1'b0;
		Clk = #40000 1'b1;
		# 40000;
	end
	Clk = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
	A[15] = #20000 1'b1;
	A[15] = #40000 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
	A[14] = #20000 1'b1;
	A[14] = #40000 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
	A[13] = #20000 1'b1;
	A[13] = #40000 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
	A[12] = #20000 1'b1;
	A[12] = #40000 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
	A[11] = #20000 1'b1;
	A[11] = #40000 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
	A[10] = #20000 1'b1;
	A[10] = #40000 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
	A[9] = #20000 1'b1;
	A[9] = #40000 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
	A[8] = #20000 1'b1;
	A[8] = #40000 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #20000 1'b1;
	A[7] = #40000 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #20000 1'b1;
	A[6] = #40000 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #20000 1'b1;
	A[5] = #40000 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #20000 1'b1;
	A[4] = #40000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #20000 1'b1;
	A[3] = #40000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #20000 1'b1;
	A[2] = #40000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
	B[15] = #20000 1'b1;
	B[15] = #40000 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
	B[14] = #20000 1'b1;
	B[14] = #40000 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
	B[13] = #20000 1'b1;
	B[13] = #40000 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
	B[12] = #20000 1'b1;
	B[12] = #40000 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
	B[11] = #20000 1'b1;
	B[11] = #40000 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
	B[10] = #20000 1'b1;
	B[10] = #40000 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
	B[9] = #20000 1'b1;
	B[9] = #40000 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
	B[8] = #20000 1'b1;
	B[8] = #40000 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
	B[7] = #20000 1'b1;
	B[7] = #40000 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
	B[6] = #20000 1'b1;
	B[6] = #40000 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #20000 1'b1;
	B[5] = #40000 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #20000 1'b1;
	B[4] = #40000 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #20000 1'b1;
	B[3] = #40000 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
	B[2] = #20000 1'b1;
	B[2] = #40000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
	B[0] = #20000 1'b1;
	B[0] = #40000 1'b0;
end 
// OE[ 11 ]
initial
begin
	OE[11] = 1'b0;
	OE[11] = #420000 1'b1;
	OE[11] = #40000 1'b0;
	OE[11] = #40000 1'b1;
	OE[11] = #40000 1'b0;
	OE[11] = #40000 1'b1;
	OE[11] = #40000 1'b0;
end 
// OE[ 10 ]
initial
begin
	OE[10] = 1'b0;
	OE[10] = #660000 1'b1;
	OE[10] = #40000 1'b0;
end 
// OE[ 9 ]
initial
begin
	OE[9] = 1'b0;
	OE[9] = #420000 1'b1;
	OE[9] = #40000 1'b0;
	OE[9] = #40000 1'b1;
	OE[9] = #40000 1'b0;
	OE[9] = #40000 1'b1;
	OE[9] = #40000 1'b0;
end 
// OE[ 8 ]
initial
begin
	OE[8] = 1'b0;
	OE[8] = #500000 1'b1;
	OE[8] = #40000 1'b0;
end 
// OE[ 7 ]
initial
begin
	OE[7] = 1'b0;
	OE[7] = #420000 1'b1;
	OE[7] = #40000 1'b0;
	OE[7] = #120000 1'b1;
	OE[7] = #40000 1'b0;
end 
// OE[ 6 ]
initial
begin
	OE[6] = 1'b0;
	OE[6] = #340000 1'b1;
	OE[6] = #40000 1'b0;
end 
// OE[ 5 ]
initial
begin
	OE[5] = 1'b0;
	OE[5] = #20000 1'b1;
	OE[5] = #40000 1'b0;
end 
// OE[ 4 ]
initial
begin
	OE[4] = 1'b0;
	OE[4] = #180000 1'b1;
	OE[4] = #40000 1'b0;
end 
// OE[ 3 ]
initial
begin
	OE[3] = 1'b0;
	OE[3] = #100000 1'b1;
	OE[3] = #40000 1'b0;
end 
// OE[ 2 ]
initial
begin
	OE[2] = 1'b0;
	OE[2] = #20000 1'b1;
	OE[2] = #40000 1'b0;
end 
// OE[ 1 ]
initial
begin
	OE[1] = 1'b0;
	OE[1] = #180000 1'b1;
	OE[1] = #40000 1'b0;
	OE[1] = #40000 1'b1;
	OE[1] = #40000 1'b0;
	OE[1] = #40000 1'b1;
	OE[1] = #40000 1'b0;
end 
// OE[ 0 ]
initial
begin
	OE[0] = 1'b0;
	OE[0] = #100000 1'b1;
	OE[0] = #40000 1'b0;
end 
// Op1[ 1 ]
initial
begin
	Op1[1] = 1'b0;
	Op1[1] = #260000 1'b1;
	Op1[1] = #40000 1'b0;
	Op1[1] = #40000 1'b1;
	Op1[1] = #40000 1'b0;
end 
// Op1[ 0 ]
initial
begin
	Op1[0] = 1'b0;
	Op1[0] = #100000 1'b1;
	Op1[0] = #40000 1'b0;
	Op1[0] = #40000 1'b1;
	Op1[0] = #40000 1'b0;
	Op1[0] = #120000 1'b1;
	Op1[0] = #40000 1'b0;
end 
// Op2[ 1 ]
initial
begin
	Op2[1] = 1'b0;
	Op2[1] = #420000 1'b1;
	Op2[1] = #40000 1'b0;
	Op2[1] = #120000 1'b1;
	Op2[1] = #40000 1'b0;
end 
// Op2[ 0 ]
initial
begin
	Op2[0] = 1'b0;
	Op2[0] = #500000 1'b1;
	Op2[0] = #40000 1'b0;
	Op2[0] = #40000 1'b1;
	Op2[0] = #40000 1'b0;
end 
// Load[ 4 ]
initial
begin
	Load[4] = 1'b0;
	Load[4] = #260000 1'b1;
	Load[4] = #40000 1'b0;
end 
// Load[ 3 ]
initial
begin
	Load[3] = 1'b0;
	Load[3] = #340000 1'b1;
	Load[3] = #40000 1'b0;
end 
// Load[ 2 ]
initial
begin
	Load[2] = 1'b0;
	Load[2] = #340000 1'b1;
	Load[2] = #40000 1'b0;
	Load[2] = #40000 1'b1;
	Load[2] = #40000 1'b0;
	Load[2] = #40000 1'b1;
	Load[2] = #40000 1'b0;
	Load[2] = #40000 1'b1;
	Load[2] = #40000 1'b0;
end 
// Load[ 1 ]
initial
begin
	Load[1] = 1'b0;
	Load[1] = #20000 1'b1;
	Load[1] = #40000 1'b0;
	Load[1] = #120000 1'b1;
	Load[1] = #40000 1'b0;
end 
// Load[ 0 ]
initial
begin
	Load[0] = 1'b0;
	Load[0] = #20000 1'b1;
	Load[0] = #40000 1'b0;
	Load[0] = #40000 1'b1;
	Load[0] = #40000 1'b0;
end 

Datapath_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clk(Clk),
	.Load(Load),
	.OE(OE),
	.Op1(Op1),
	.Op2(Op2),
	.sampler_tx(sampler)
);

Datapath_vlg_check_tst tb_out(
	.AU1(AU1),
	.AU2(AU2),
	.O(O),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.R4(R4),
	.R5(R5),
	.S1(S1),
	.S2(S2),
	.sampler_rx(sampler)
);
endmodule

