// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/15/2022 15:20:35"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ROM_lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ROM_lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] addr;
reg clock;
reg cs;
reg rd_en;
// wires                                               
wire [7:0] data_out;

// assign statements (if any)                          
ROM_lab5 i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.clock(clock),
	.cs(cs),
	.data_out(data_out),
	.rd_en(rd_en)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 
// addr[ 6 ]
initial
begin
	addr[6] = 1'b0;
end 
// addr[ 5 ]
initial
begin
	addr[5] = 1'b0;
end 
// addr[ 4 ]
initial
begin
	addr[4] = 1'b0;
end 
// addr[ 3 ]
initial
begin
	addr[3] = 1'b0;
	addr[3] = #320000 1'b1;
	addr[3] = #120000 1'b0;
	addr[3] = #320000 1'b1;
end 
// addr[ 2 ]
initial
begin
	addr[2] = 1'b0;
	addr[2] = #160000 1'b1;
	addr[2] = #160000 1'b0;
	addr[2] = #280000 1'b1;
	addr[2] = #160000 1'b0;
	addr[2] = #160000 1'b1;
end 
// addr[ 1 ]
initial
begin
	repeat(2)
	begin
		addr[1] = 1'b0;
		addr[1] = #80000 1'b1;
		# 80000;
	end
	addr[1] = 1'b0;
	addr[1] = #80000 1'b1;
	# 40000;
	repeat(3)
	begin
		addr[1] = 1'b0;
		addr[1] = #80000 1'b1;
		# 80000;
	end
	addr[1] = 1'b0;
end 
// addr[ 0 ]
initial
begin
	repeat(5)
	begin
		addr[0] = 1'b0;
		addr[0] = #40000 1'b1;
		# 40000;
	end
	addr[0] = 1'b0;
	addr[0] = #80000 1'b1;
	# 40000;
	repeat(6)
	begin
		addr[0] = 1'b0;
		addr[0] = #40000 1'b1;
		# 40000;
	end
end 

// cs
initial
begin
	cs = 1'b1;
end 

// rd_en
initial
begin
	rd_en = 1'b1;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

